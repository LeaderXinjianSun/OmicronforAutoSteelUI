using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using HalconDotNet;
using BingLibrary.hjb;

namespace OmicronforAutoSteel.Model
{
    public class Camera
    {
        public HImage himage;
        private bool status = false;
        // Local iconic variables 
        HObject ho_Image;
        // Local control variables 
        HTuple hv_AcqHandle;

        public delegate void PrintEventHandler();
        public event PrintEventHandler ImageChanged;

        public Camera()
        {
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_Image);
        }
        public bool OpenDevice()
        {
            bool r;
            //Code generated by Image Acquisition 01
            try
            {
                HOperatorSet.OpenFramegrabber("DirectShow", 1, 1, 0, 0, 0, 0, "default", 8, "rgb",
    -1, "false", "default", "Integrated Camera", 0, -1, out hv_AcqHandle);
                //Integrated Camera
                //HD USB Camera
                r = true;
                status = true;
            }
            catch (Exception ex)
            {
                r = false;
                status = false;
                Log.Default.Error("Camera.OpenDevice", ex.Message);
            }
            return r;

        }
        public async Task<bool> Action()
        {
            await ((Func<Task>)(() =>
            {
                return Task.Run(() =>
                {
                    if (status)
                    {
                        ho_Image.Dispose();
                        HOperatorSet.GrabImage(out ho_Image, hv_AcqHandle);
                        himage = HObjectToHImage(ho_Image);
                        ImageChanged();
                    }
                });
            }))();
            return true;
        }
        public void CloseDevice()
        {
            status = false;
            HOperatorSet.CloseFramegrabber(hv_AcqHandle);
        }
        private HImage HObjectToHImage(HObject hObject)
        {
            HImage hImage = null;
            HTuple channels;
            HOperatorSet.CountChannels(hObject, out channels);
            if (channels.I == 1)
            {
                HTuple pointer, htype, width, height;
                HOperatorSet.GetImagePointer1(hObject, out pointer, out htype, out width, out height);
                hImage = new HImage();
                hImage.GenImage1(htype.S, width.I, height.I, pointer.IP);
            }
            else if (channels.I == 3)
            {
                HTuple pointerR, pointerG, pointerB, htype, width, height;
                HOperatorSet.GetImagePointer3(hObject, out pointerR, out pointerG, out pointerB, out htype, out width, out height);
                hImage = new HImage();
                hImage.GenImage3(htype.S, width.I, height.I, pointerR.IP, pointerG.IP, pointerB.IP);
            }
            return hImage;
        }
    }
}
