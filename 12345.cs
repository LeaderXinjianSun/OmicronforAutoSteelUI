//
//  File generated by HDevelop for HALCON/DOTNET (C#) Version 10.0
//

using HalconDotNet;

public partial class HDevelopExport
{
#if !NO_EXPORT_APP_MAIN
  public HDevelopExport()
  {
    // Default settings used in HDevelop 
    HOperatorSet.SetSystem("do_low_error", "false");
    action();
  }
#endif

  // Main procedure 
  private void action()
  {

    // Local iconic variables 

    HObject ho_Image, ho_GrayImage, ho_Rectangle;
    HObject ho_ImageReduced, ho_Model, ho_ModelTrans, ho_ImageSearch;
    HObject ho_GrayImageSearch;


    // Local control variables 

    HTuple hv_Width, hv_Height, hv_WindowHandle;
    HTuple hv_ModelID, hv_Area, hv_RowRef, hv_ColumnRef, hv_HomMat2D;
    HTuple hv_Row, hv_Column, hv_Angle, hv_Scale, hv_Score;
    HTuple hv_I, hv_HomMat2DIdentity=new HTuple(), hv_HomMat2DTranslate=new HTuple();
    HTuple hv_HomMat2DRotate=new HTuple(), hv_HomMat2DScale=new HTuple();

    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Image);
    HOperatorSet.GenEmptyObj(out ho_GrayImage);
    HOperatorSet.GenEmptyObj(out ho_Rectangle);
    HOperatorSet.GenEmptyObj(out ho_ImageReduced);
    HOperatorSet.GenEmptyObj(out ho_Model);
    HOperatorSet.GenEmptyObj(out ho_ModelTrans);
    HOperatorSet.GenEmptyObj(out ho_ImageSearch);
    HOperatorSet.GenEmptyObj(out ho_GrayImageSearch);

    // dev_update_pc(...); only in hdevelop
    // dev_update_window(...); only in hdevelop
    // dev_update_var(...); only in hdevelop
    ho_Image.Dispose();
    HOperatorSet.ReadImage(out ho_Image, "C:/Users/lenovo/Desktop/p.bmp");
    HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);
    ho_GrayImage.Dispose();
    HOperatorSet.Rgb1ToGray(ho_Image, out ho_GrayImage);
    if (HDevWindowStack.IsOpen())
    {
      HOperatorSet.CloseWindow(HDevWindowStack.Pop());
    }
    HOperatorSet.SetWindowAttr("background_color","black");
    HOperatorSet.OpenWindow(0,0,hv_Width,hv_Height,0,"","",out hv_WindowHandle);
    HDevWindowStack.Push(hv_WindowHandle);
    if (HDevWindowStack.IsOpen())
    {
      HOperatorSet.SetColor(HDevWindowStack.GetActive(), "red");
    }
    if (HDevWindowStack.IsOpen())
    {
      HOperatorSet.DispObj(ho_GrayImage, HDevWindowStack.GetActive());
    }
    ho_Rectangle.Dispose();
    HOperatorSet.GenRectangle1(out ho_Rectangle, 227, 377, 273, 422);
    ho_ImageReduced.Dispose();
    HOperatorSet.ReduceDomain(ho_GrayImage, ho_Rectangle, out ho_ImageReduced);
    HOperatorSet.CreateScaledShapeModel(ho_ImageReduced, 5, (new HTuple(-45)).TupleRad()
        , (new HTuple(90)).TupleRad(), "auto", 0.8, 1.0, "auto", "none", "ignore_global_polarity", 
        40, 10, out hv_ModelID);
    ho_Model.Dispose();
    HOperatorSet.GetShapeModelContours(out ho_Model, hv_ModelID, 1);
    HOperatorSet.AreaCenter(ho_Rectangle, out hv_Area, out hv_RowRef, out hv_ColumnRef);
    HOperatorSet.VectorAngleToRigid(0, 0, 0, hv_RowRef, hv_ColumnRef, 0, out hv_HomMat2D);
    ho_ModelTrans.Dispose();
    HOperatorSet.AffineTransContourXld(ho_Model, out ho_ModelTrans, hv_HomMat2D);
    if (HDevWindowStack.IsOpen())
    {
      HOperatorSet.DispObj(ho_Image, HDevWindowStack.GetActive());
    }
    if (HDevWindowStack.IsOpen())
    {
      HOperatorSet.DispObj(ho_ModelTrans, HDevWindowStack.GetActive());
    }
    ho_ImageSearch.Dispose();
    HOperatorSet.ReadImage(out ho_ImageSearch, "C:/Users/lenovo/Desktop/p.bmp");
    ho_GrayImageSearch.Dispose();
    HOperatorSet.Rgb1ToGray(ho_ImageSearch, out ho_GrayImageSearch);
    if (HDevWindowStack.IsOpen())
    {
      HOperatorSet.DispObj(ho_GrayImageSearch, HDevWindowStack.GetActive());
    }
    HOperatorSet.FindScaledShapeModel(ho_GrayImageSearch, hv_ModelID, (new HTuple(-45)).TupleRad()
        , (new HTuple(90)).TupleRad(), 0.8, 1.0, 0.5, 0, 0.5, "least_squares", 5, 
        0.8, out hv_Row, out hv_Column, out hv_Angle, out hv_Scale, out hv_Score);
    for (hv_I=0; (int)hv_I<=(int)((new HTuple(hv_Score.TupleLength()))-1); hv_I = (int)hv_I + 1)
    {
      HOperatorSet.HomMat2dIdentity(out hv_HomMat2DIdentity);
      HOperatorSet.HomMat2dTranslate(hv_HomMat2DIdentity, hv_Row.TupleSelect(hv_I), 
          hv_Column.TupleSelect(hv_I), out hv_HomMat2DTranslate);
      HOperatorSet.HomMat2dRotate(hv_HomMat2DTranslate, hv_Angle.TupleSelect(hv_I), 
          hv_Row.TupleSelect(hv_I), hv_Column.TupleSelect(hv_I), out hv_HomMat2DRotate);
      HOperatorSet.HomMat2dScale(hv_HomMat2DRotate, hv_Scale.TupleSelect(hv_I), hv_Scale.TupleSelect(
          hv_I), hv_Row.TupleSelect(hv_I), hv_Column.TupleSelect(hv_I), out hv_HomMat2DScale);
      ho_ModelTrans.Dispose();
      HOperatorSet.AffineTransContourXld(ho_Model, out ho_ModelTrans, hv_HomMat2DScale);
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.DispObj(ho_ModelTrans, HDevWindowStack.GetActive());
      }
    }
    HOperatorSet.ClearShapeModel(hv_ModelID);
    ho_Image.Dispose();
    ho_GrayImage.Dispose();
    ho_Rectangle.Dispose();
    ho_ImageReduced.Dispose();
    ho_Model.Dispose();
    ho_ModelTrans.Dispose();
    ho_ImageSearch.Dispose();
    ho_GrayImageSearch.Dispose();

  }


}
#if !NO_EXPORT_APP_MAIN
public class HDevelopExportApp
{
  static void Main(string[] args)
  {
    new HDevelopExport();
  }
}
#endif

